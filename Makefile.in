netbootcd_dir = build/netbootcd.d
install_dir = mnt/@isolinux_dir@
initrd_list = netbootcd
initrd_dirs = $(foreach f, $(initrd_list), build/$(f).d)
downloads_list = $(initrd_list) netbootcd_vmlinuz sed
downloads = $(foreach f, $(downloads_list), data/$(f))
standalone_scripts_list = @mbd_menu@ @mbd_process_iso@
scripts_list = $(standalone_scripts_list) @mbd_command@
standalone_scripts = $(foreach f, $(standalone_scripts_list), ${install_dir}/$(f))
scripts = $(foreach f, $(scripts_list), $(netbootcd_dir)/usr/bin/$(f))
initrd_scripts_list = init before_switch_root
initrd_scripts = $(foreach f, $(initrd_scripts_list), build/mbd_initrd.d@mbd_dir@/$(f))
uninstall_list = $(standalone_scripts_list) syslinux.cfg ldlinux.sys vmlinuz initrd.gz mbd_initrd.gz @magic@

all: $(downloads) build/sed
	@echo 'Ready to install'

install: mount_device $(install_dir)/@magic@ $(install_dir)/initrd.gz $(install_dir)/vmlinuz $(install_dir)/mbd_initrd.gz $(install_dir)/syslinux.cfg ${standalone_scripts}
	sync
	umount mnt
	@echo 'Installation complete'

data/%: data.urls
	mkdir -p "$(@D)"
	url=`sed -ne 's/^$* //p' data.urls` ; \
	[ -n "$$url" ] && { echo "download $$url" && \
	@downloader@ '$@' "$$url" && \
	touch '$@'; } || { echo "Error while downloading '$*'"; false; }

mount_device: force
	[ -b '@target_device@' ]
	umount '@target_device@' || true
	mkdir -p 'mnt'
	mount '@target_device@' mnt

$(install_dir)/@magic@:
	[ -b '@target_device@' ]
	mkdir -p '$(@D)/iso'
	[ x_"@install_syslinux_on_dev@" = "x_" ] || { sh install_syslinux.sh && sync && mount '@target_device@' mnt; }
	[ x_"$$(blkid -o device -t LABEL='@mbd_label@' '@target_device@')" = "x_@target_device@" ] ||\
	{ echo "Device (@target_device@) label needs to be '@mbd_label@'"; false; }
	touch '$@'

$(install_dir)/@mbd_menu@: script/@mbd_menu@
	install -m500 '$<' '$@'

$(install_dir)/@mbd_process_iso@: script/@mbd_process_iso@
	install -m500 '$<' '$@'

$(install_dir)/%.gz: build/%.gz
	cp '$<' '$@'

build/initrd.gz: $(initrd_dirs) $(scripts) $(netbootcd_dir)/usr/bin/sed
	cd "$(netbootcd_dir)" && find . | cpio --create --format='newc' | gzip -c > "../$(@F)"

build/mbd_initrd.gz: build/mbd_initrd.d $(initrd_scripts) 
	cd 'build/mbd_initrd.d' && find . | cpio --create --format='newc' | gzip -c > "../$(@F)"

$(netbootcd_dir)/usr/bin/@mbd_command@: script/@mbd_command@
	grep -q 'startx||netboot' $(netbootcd_dir)/etc/skel/.profile && \
	sed -ie 's/startx||netboot/@mbd_command@||@mbd_command@/' $(netbootcd_dir)/etc/skel/.profile || \
	grep -q '@mbd_command@||@mbd_command@' $(netbootcd_dir)/etc/skel/.profile
	cp '$<' '$@'
	chmod +x '$@'

$(netbootcd_dir)/usr/bin/sed: build/sed
	cp '$<' '$@'
	chmod +x '$@'

$(netbootcd_dir)/usr/bin/%: script/%
	cp '$<' '$@'
	chmod +x '$@'

build/mbd_initrd.d@mbd_dir@/%: script/initrd/%
	mkdir -p "$(@D)"
	cp '$<' '$@'
	chmod +x '$@'

build/sed: data/sed
	! [ -d '$@.d' ] || rm -rf './$@.d'
	mkdir -p '$@.d'
	tar -C '$@.d' -xjf '$<'
	cd '$@.d/sed'-* && ./configure && make
	cp '$@.d/sed'-*'/sed/sed' '$@'

build/mbd_initrd.d: $(netbootcd_dir)
	! [ -d '$@' ] || rm -rf './$@'
	mkdir -p '$@@mbd_dir@'
	cp -rp "$(netbootcd_dir)/dev" '$@@mbd_dir@/dev'
	mknod '$@@mbd_dir@/dev/@loop_dev@' b 7 '@loop_number@'

build/%.d: data/%
	@[ "$$(id -u)" = "0" ] || { echo 'Need root privileges'; false; }
	! [ -d './$@.tmp' ] || rm -rf './$@.tmp'
	mkdir -p './$@.tmp'
	cd './$@.tmp' && cat '../../data/$*' | gzip -cd | cpio -id --no-absolute-filenames
	! [ -d './$@' ] || rm -rf './$@'
	mv './$@.tmp' './$@'

$(install_dir)/vmlinuz: data/netbootcd_vmlinuz
	cp '$<' '$@'

$(install_dir)/syslinux.cfg: syslinux.cfg
	cp '$<' '$@'

clean:
	[ -d 'mnt' ] && umount 'mnt' || true
	! [ -d 'mnt' ] || ! [ "$$(ls -A mnt)" ]
	! [ -d 'mnt' ] || rm -rf 'mnt'
	! [ -d 'build' ] || rm -rf 'build'
	! [ -d 'data' ] || rm -rf 'data'

uninstall: mount_device
	[ -f "$(install_dir)/@magic@" ] || { echo 'Not installed - no magic'; umount 'mnt'; false; }
	{ for i in $(uninstall_list); do rm "$(install_dir)/$$i"; done; }
	[ "$$(ls -A mnt/@images_dir@)" ] || { rm -r "mnt/@images_dir@" && \
	{ [ "$$(ls -A $(install_dir))" ] || rm -r "$(install_dir)"; }; }
	sync
	umount mnt
	@echo 'Uninstalled'

force: 
.PHONY: all clean install need_root uninstall
