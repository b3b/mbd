#!/bin/sh

@include_script_lib@
@include_dialog_lib@
@include_isolinux_lib@

usage() {
    cat << EOF
usage: $0 [-y] [-t dir] [-i initrd] [dir]
-y        :  do not ask for confirmation
-t dir    :  directory to store temporary files
-i initrd :  initrd to inject
dir       :  directory for processing
EOF
}

exit_to_shell() {
    exit 0
}

panic() {
    show error_msg "${1}"
    echo "${1}" >&2
    exit_to_shell
}

kexec_to() {
    local wdir="${1}"; local image="${2}"
    local kernel=''; local append=''; local initrd=''
    cat "${wdir}/isolinux_entry" | prepare_kexec_parameters "${wdir}/mp" > "${wdir}/kexec_parameters"
    [ ${?} -eq 0 ] || { echo 'error preparing kexc parameters.'; return 1; }
    cat "${wdir}/kexec_parameters" | {
        read kernel
        read initrd
        read append
         err=$(kexec_load "${wdir}" "${kernel}" "${append}" "${initrd}" "${mbd_initrd}" "${image}" 2>&1)
    }
    if [ ${?} -eq 0 ]; then
        sync
        umount -a
        mount -o remount,ro /
        kexec -e
    fi
    echo "kexec fail. ${err}"
}

parse_args() {
    while getopts ':t:i:y' opt; do
        case ${opt} in
            t)
                tmp_dir="${OPTARG}"
                ;;
            i)
                mbd_initrd="${OPTARG}"
                ;;
            y)
                yes_mode=1
                ;;
            \?|:)
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1)); OPTIND=1
    images_dir="$*"
}

directory_menu() {
    dialog_menu 'What would you like to boot?'
    for node in "${1}"/*; do
        local name="${node##*/}"
        if [ -d "${node}" ]; then
            echo "'${name}' '/'"
        elif [ "${node}" != "${node%.[Ii][Ss][oO]}" ]; then
            echo "'${name}' ' '"
        fi
    done
}

directory_dialog() {
    local root="${1}"; local dir="${2}"
    choose=''
    while [ -z "${choose}" ]; do
        show directory_menu "${root}/${dir}"
        if [ ${?} -eq 0 ] && [ -n "${choose}" ]; then
            local node="${root}/${dir}/${choose}"
            if [ -d "${root}/${dir}/${choose}" ]; then
                directory_dialog "${root}" "${dir}/${choose}"
            elif [ "${choose}" != "${choose%.[Ii][Ss][oO]}" ]; then
                iso_dialog "${root}" "${dir}/${choose}"
            fi
            choose=''
        else
            return 0
        fi
    done
}

iso_menu() {
    [ -n "${1}" ] &&  echo "--default-item \"${1}\""
    dialog_menu 'What would you like to boot?'
    isolinux_labels_list | sed -e "s_^_'_"  -e "s_\$_' ' '_"
}

iso_dialog() {
    local image="${1}/${2}"
    local wdir="${tmp_dir}"$(readlink -f "${image}")
    [ -x './@mbd_process_iso@' ] && cmd='./@mbd_process_iso@' || cmd='@mbd_process_iso@'
    err=$("${cmd}" "${wdir}" "${image}" 2>&1)
    if [ ! ${?} -eq 0 ] || [ ! -r "${wdir}/isolinux.cfg" ]; then
        panic "Error processing image. ${err}"
    fi
    choose=''
    while [ -z "${choose}" ]; do
        show iso_menu $(cat "${wdir}/default_label") < "${wdir}/isolinux.cfg"
        if [ ${?} -eq 0 ] && [ -n "${choose}" ]; then
            entry_dialog "${wdir}" "${2}" "${choose}"
            choose=''
        else
            return 0
        fi
    done
}

entry_menu() {
    local label; local value
    for label in "Label:" "Kernel:" "Append:"; do
        read value
        echo "${label}" "${value}"
    done | dialog_form_menu "${1}"
}

entry_dialog() {
    local wdir="${1}"; local image="${2}"; local entry_name="${3}"
    local entry=$(cat "${wdir}/isolinux.cfg" | isolinux_extract_entry "${choose}")
    [ ${?} -eq 0 ] || { echo "error extracting label. ${err}"; return 1; }
    local i
    for i in 'label' 'kernel' 'append'; do
        i=$(echo "${entry}" | sed -ne "s_^${i}\s\+\(.*\)_\1_p")
        echo "$i"
    done > "${wdir}/isolinux_entry"
    choose=''
    while [ -z "${choose}" ]; do
        show entry_menu 'Boot entry' < "${wdir}/isolinux_entry"
        if [ ${?} -eq 0 ] && [ -n "${choose}" ]; then
            echo "${choose}" > "${wdir}/isolinux_entry"
            ask_confirmation 'The system will reboot (or crash). Continue?'
            if [ ${?} -eq 0 ]; then
                err=$(kexec_to "${wdir}" "${image}" "${wdir}/isolinux_entry" 2>&1)
                panic "${err}"
            fi
            choose=''
        else
            return 0
        fi
    done
}

parse_args "$@" || ! usage || exit_to_shell
tmp_dir=$(readlink -f "${tmp_dir:-@tmp_dir@}")
[ -d "${tmp_dir}" ] || panic "$(echo 'No directory for temporary files'; usage)"
mbd_initrd="${mbd_initrd:-./mbd_initrd.gz}"
images_dir="${images_dir:-./iso}"
iso_list=$(find "${images_dir}" -name '*.[Ii][Ss][oO]' -print)
[ -z "${iso_list}" ] && panic 'No ISO images found'
directory_dialog "${images_dir}" ''
