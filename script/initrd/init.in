#!/bin/sh

@include_script_lib@

panic() {
    echo "Boot error. ${1}"
    echo "Press Enter to continue boot, Type abracadabra for shell"
    read what
    [ -n "${what}" ] && exec /bin/sh
}

get_parameter() {
    local p; p=$(cat /proc/cmdline | sed -e "s|\s|\n|g" | sed -ne "/^${1}\(=\|\$\)/p")
    [ -n "${p}" ] && echo "${p}" | sed -ne "/^$1=/{s|^[^=]*=||;h;}; \$ {x;p}"
}

ask_confirmation() {
    local text; text=${1:-Continue?}
    local yes_label; yes_label=${2:-y}
    local no_label; no_label=${3:-n}
    echo "${text} (${yes_label}/${no_label})"
    read what
    [ "x_${what}" = "x_${yes_label}" ] && return 0
    [ "x_${what}" = "x_${no_label}" ] && return 1
    ask_confirmation "${text}" "${yes_label}" "${no_label}"
}

PATH="${PATH}:/sbin:/usr/sbin:/bin:/usr/bin"
/bin/busybox --install -s
mkdir -p /sys
mkdir -p /proc
mount -t sysfs -o nodev,noexec,nosuid none /sys
mount -t proc -o nodev,noexec,nosuid none /proc
/bin/busybox --install -s
mv /dev /dev.orig
mv @mbd_dir@/dev /dev

for i in 'ehci-hcd' 'ohci-hcd' 'uhci-hcd' 'usb-storage' 'ata_piix' 'sd_mod'; do 
    modprobe ${i} 
done

[ -b /dev/@loop_dev@ ] || panic 'No devices files'
find_mount_mbd '@mbd_dir@/mnt'
[ -f '@mbd_dir@/mnt/@isolinux_dir@/@magic@' ] || panic "Cannot mount \"@mbd_verbose@\" disk"
 
for x in $(cat /proc/cmdline); do
    case $x in
        boot_image=*)
            boot_image=${x#boot_image=}
 	;;
        initrd=*)
            initrd=${x##*/}
        ;;
    esac
done

if [ -x '/bin/run-init' ]; then
    umount ${mbd_device}
    mv ${mbd_device} @mbd_dir@/device
    switch_root_cmd='/bin/run-init'
    mv "${switch_root_cmd}" "${switch_root_cmd}.orig"
    mv '@mbd_dir@/before_switch_root' "${switch_root_cmd}"
else
    if [ "x_${initrd}" = "x_rootfs.gz" ] ||
        [ "x_${initrd}" = "x_tinycore.gz" ] ||
        [ "x_${initrd}" = "x_microcore.gz" ]; then
        umount ${mbd_device}
    else
        [ -f "${boot_image}" ] || panic 'No image specified'
        losetup '/dev/@loop_dev@' "${boot_image}" || panic 'Cannot mount image'

        # Tiny Core v4.2
        if [ "x_${initrd}" = "x_core.gz" ]; then
            mkdir '@mbd_dir@/image' ; mount '/dev/@loop_dev@' '@mbd_dir@/image'

            get_parameter 'cde' && [ -z $(get_parameter 'tce') ] &&
            [ ! -d '@mbd_dir@/mnt/tce' ] && [ -d '@mbd_dir@/image/cde' ] &&
            ask_confirmation 'No TCE apps directory found on disk. Copy apps directory from image?' &&
            cp -r '@mbd_dir@/image/cde' '@mbd_dir@/mnt/tce'
            
            umount '@mbd_dir@/image' ; losetup -d '/dev/@loop_dev@' ; umount ${mbd_device}
        fi
    fi
    if [ -x '/sbin/switch_root' ]; then
        switch_root_cmd='/sbin/switch_root'
        cp "${switch_root_cmd}" "@mbd_dir@/${switch_root_cmd##*/}"
        rm "${switch_root_cmd}"
        ln -s '@mbd_dir@/before_switch_root' "${switch_root_cmd}"
    fi
fi

mv /dev @mbd_dir@/
mv /dev.orig /dev
umount /sys
umount /proc
exec /init 
panic 'Cannot execute /init'
exec /bin/sh
